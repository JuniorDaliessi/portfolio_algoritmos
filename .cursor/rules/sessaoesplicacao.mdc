---
description: 
globs: 
alwaysApply: true
---
Regras do Projeto: Portfolio de Algoritmos
Estrutura de Dados dos Desafios
1. Organização Hierárquica
Todos os desafios devem seguir a estrutura hierárquica definida:
ChallengeDay: Representa um dia com múltiplos desafios
ChallengeData: Representa um desafio com múltiplas versões
ChallengeVersion: Representa uma implementação específica de um desafio
TraceStep: Representa um passo na execução do algoritmo (estudo de mesa)
2. Nomenclatura e IDs
Os IDs dos dias devem seguir o formato: "Dia X" (ex: "Dia 1", "Dia 2")
Os IDs dos desafios devem seguir o formato: "diaX-desafioY" (ex: "dia1-desafio1")
Os IDs das versões devem seguir o formato: "diaX-desafioY-vZ" (ex: "dia1-desafio1-v1")
Os títulos devem ser descritivos e refletir o conteúdo do desafio
3. Conteúdo Obrigatório
Cada versão de desafio deve incluir os seguintes elementos:
statement: Enunciado do desafio em formato HTML
code: Implementação da solução em JavaScript/TypeScript
explanation: Explicação detalhada linha por linha da solução em formato HTML
trace: Array de passos para o estudo de mesa do algoritmo
Estilo de Formatação
1. Enunciado (statement)
Deve ser formatado em HTML semântico
Deve usar títulos <h2> para o nome do desafio
Pode incluir parágrafos, listas, e outros elementos para clareza
Deve explicar o problema de forma clara e completa
2. Código (code)
Deve incluir comentários que explicam a lógica e o propósito
Deve seguir boas práticas de formatação e nomenclatura
Deve ser funcional e executável
Deve resolver o problema proposto no enunciado
3. Explicação (explanation)
Deve ser formatada em HTML semântico
Deve explicar o raciocínio e a abordagem da solução linha por linha do codigo
Pode incluir explicações de conceitos, técnicas e padrões utilizados
Deve ser compreensível para iniciantes em programação
4. Estudo de Mesa (trace)
Cada passo deve incluir:
Número do passo (step)
Nome da chamada/operação (call)
Explicação do que ocorre nesse passo (explanation)
Valores relevantes para visualização
Deve cobrir casos representativos da execução do algoritmo
Pode incluir informações específicas relacionadas ao contexto do algoritmo
Padrões de Implementação
1. Validação de Entrada
Sempre validar as entradas do usuário antes de processá-las
Usar funções como isNaN() para verificar números
Fornecer mensagens de erro claras quando a validação falhar
2. Formatação de Saída
Usar .toFixed(2) para valores monetários
Incluir unidades apropriadas (R$, %, etc.)
Adicionar quebras de linha para melhorar a legibilidade
Usar cabeçalhos claros para cada seção de saída
3. Comentários no Código
Incluir um cabeçalho com o nome do desafio
Documentar regras e requisitos do problema
Explicar trechos complexos ou não intuitivos
Usar comentários para separar seções lógicas
Categorias de Desafios
Os desafios devem cobrir diversas categorias:
Conceitos básicos: Variáveis, tipos de dados, operadores
Estruturas condicionais: if/else, switch
Loops: for, while, do-while
Arrays e objetos: Manipulação de coleções
Funções: Implementação, parâmetros, retorno
Algoritmos clássicos: Fibonacci, ordenação, busca
Problemas do mundo real: Finanças, processamento de dados, simulações
Ao adicionar novos desafios ou modificar os existentes, é essencial seguir estes padrões para manter a consistência e qualidade do portfolio de algoritmos.